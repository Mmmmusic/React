JSX：
      className
      htmlFor 
      dangerouslySetInnerHTML
      {/* */}

React：
      声明式开发(js,jq是命令式开发,大部分都是在操作DOM)
      可以和其他框架并存
      组件化(通过ES6的class继承React.Componet来继承组件,组件首字母大写)
      单向数据流
      视图层框架
      函数式编程

      01 声明式开发：
            减少了大量的DOM操作代码量
      02 框架并存：
            不影响其他框架的使用,比如jq,swiper
      03 组件通信:
            父子通信：
                  父组件通过属性向子组件传值,子组件用this.props.(数据)接收
            子父通信：
                  父组件先向子组件传递一个方法,子组件用this.props.(数据/方法)去调用,间接的来操作父组件的数据/方法
      04 单向数据流：
            父组件可以向子组件传值,但是子组件不能直接去改变这个值,只能单向的去传递,不能修改.目的是为了开发方便,组件多了的话,单个只影响单个数据,不会影响其它组件,方便了代码调试
      05 视图层框架：
            用react搭建视图,大型项目需要借用其它数据框架,方便组件通信,小型项目可以使用内置组件通信,大型项目使用redux等数据框架进行数据传递会更为方便,也不会造成代码的冗余
      06 函数式编程：
            用react写出来的项目更容易实现前端自动化测试

React开发调试工具(React Developer Tools)

参数类型校验及参数默认值(PropTypes & DefaultProps)：
      PropTypes(强校验):接收外部传递的值,限制要求组件传递的值类型
      DefaultProps(默认值):设置组件数据默认值(缺省值)